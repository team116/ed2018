#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/phoenix.h"
#include <DigitalInput.h>
#include <DigitalOutput.h>
#include <Solenoid.h>
#include <SpeedControllerGroup.h>
#include <AnalogPotentiometer.h>
#include <Encoder.h>
#include <RobotDrive.h>
#include <PWMTalonSRX.h>
#include <PWMVictorSPX.h>

std::shared_ptr<frc::SpeedController> RobotMap::mobilityRLspeedController;
std::shared_ptr<PWMTalonSRX> RobotMap::mobilityREAR_LEFT_MOTOR;
std::shared_ptr<frc::SpeedController> RobotMap::mobilityFLspeedController;
std::shared_ptr<PWMTalonSRX> RobotMap::mobilityFRONT_LEFT_MOTOR;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::mobilityleftSpeedController;
std::shared_ptr<frc::SpeedController> RobotMap::mobilityRRspeedController;
std::shared_ptr<PWMTalonSRX> RobotMap::mobilityREAR_RIGHT_MOTOR;
std::shared_ptr<frc::SpeedController> RobotMap::mobilityFRspeedController;
std::shared_ptr<PWMTalonSRX> RobotMap::mobilityFRONT_RIGHT_MOTOR;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::mobilityrightSpeedController;
std::shared_ptr<frc::RobotDrive> RobotMap::mobilityRobotDrive41;
std::shared_ptr<frc::Encoder> RobotMap::mobilityleftEncoder;
std::shared_ptr<frc::Encoder> RobotMap::mobilityrightEncoder;

std::shared_ptr<PWMTalonSRX> RobotMap::liftMOTOR_LIFT;
std::shared_ptr<frc::SpeedController> RobotMap::liftliftSpeedController;
std::shared_ptr<frc::DigitalInput> RobotMap::lifttopLS;
std::shared_ptr<frc::DigitalInput> RobotMap::liftbottomLS;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::liftStringPot;

std::shared_ptr<frc::Solenoid> RobotMap::armsX_AXIS_LEFT_SOLENOID;
std::shared_ptr<frc::Solenoid> RobotMap::armsX_AXIS_RIGHT_SOLENOID;
std::shared_ptr<frc::Solenoid> RobotMap::armsY_AXIS_LEFT_SOLENOID;
std::shared_ptr<frc::Solenoid> RobotMap::armsY_AXIS_RIGHT_SOLENOID;

std::shared_ptr<frc::Solenoid> RobotMap::rungBACK_BAR_SOLENOID;

std::shared_ptr<PWMVictorSPX> RobotMap::climberMOTOR_CLIMBER;
std::shared_ptr<frc::DigitalInput> RobotMap::climberclimberTopLS;
std::shared_ptr<frc::DigitalInput> RobotMap::climberclimberBottomLS;
std::shared_ptr<frc::SpeedController> RobotMap::climberclimberSpeedController;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::climberSTRING_POT;

std::shared_ptr<frc::DigitalOutput> RobotMap::lEDLightsLED;

std::shared_ptr<PWMVictorSPX> RobotMap::conveyorBeltsMOTOR_LEFT_CON_BELT;
std::shared_ptr<PWMVictorSPX> RobotMap::conveyorBeltsMOTOR_RIGHT_CON_BELT;
std::shared_ptr<frc::DifferentialDrive> RobotMap::conveyorBeltsDifferentialDrive2;
std::shared_ptr<frc::DigitalInput> RobotMap::conveyorBeltsleftConBeltLS;
std::shared_ptr<frc::DigitalInput> RobotMap::conveyorBeltsrightConBeltLS;
std::shared_ptr<frc::SpeedController> RobotMap::conveyorBeltsleftConBeltSpeedController;
std::shared_ptr<frc::SpeedController> RobotMap::conveyorBeltsrightConBeltSpeedController;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    mobilityRLspeedController.reset(new frc::PWMTalonSRX(2));
    lw->AddActuator("Mobility", "RLspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityRLspeedController));
    
    mobilityREAR_LEFT_MOTOR.reset(new WPI_TalonSRX(1));
    
    
    mobilityFLspeedController.reset(new frc::PWMTalonSRX(6));
    lw->AddActuator("Mobility", "FLspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityFLspeedController));
    
    mobilityFRONT_LEFT_MOTOR.reset(new WPI_TalonSRX(2));
    
    
    mobilityleftSpeedController = std::make_shared<frc::SpeedControllerGroup>(*mobilityRLspeedController, *mobilityFLspeedController  );
    lw->AddActuator("Mobility", "leftSpeedController", mobilityleftSpeedController);
    
    mobilityRRspeedController.reset(new frc::PWMTalonSRX(1));
    lw->AddActuator("Mobility", "RRspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityRRspeedController));
    
    mobilityREAR_RIGHT_MOTOR.reset(new WPI_TalonSRX(0));
    
    
    mobilityFRspeedController.reset(new frc::PWMTalonSRX(8));
    lw->AddActuator("Mobility", "FRspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityFRspeedController));
    
    mobilityFRONT_RIGHT_MOTOR.reset(new WPI_TalonSRX(7));
    
    
    mobilityrightSpeedController = std::make_shared<frc::SpeedControllerGroup>(*mobilityRRspeedController, *mobilityFRspeedController  );
    lw->AddActuator("Mobility", "rightSpeedController", mobilityrightSpeedController);
    
    mobilityRobotDrive41.reset(new frc::RobotDrive(mobilityFLspeedController, mobilityRLspeedController,
              mobilityFRspeedController, mobilityRRspeedController));
    
    mobilityRobotDrive41->SetSafetyEnabled(true);
        mobilityRobotDrive41->SetExpiration(0.1);
        mobilityRobotDrive41->SetSensitivity(0.5);
        mobilityRobotDrive41->SetMaxOutput(1.0);

    mobilityleftEncoder.reset(new frc::Encoder(0, 1, false, frc::Encoder::k4X));
    lw->AddSensor("Mobility", "leftEncoder", mobilityleftEncoder);
    mobilityleftEncoder->SetDistancePerPulse(1.0);
    mobilityleftEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    mobilityrightEncoder.reset(new frc::Encoder(2, 3, false, frc::Encoder::k4X));
    lw->AddSensor("Mobility", "rightEncoder", mobilityrightEncoder);
    mobilityrightEncoder->SetDistancePerPulse(1.0);
    mobilityrightEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    liftMOTOR_LIFT.reset(new WPI_TalonSRX(6));
    
    
    liftliftSpeedController.reset(new frc::PWMTalonSRX(3));
    lw->AddActuator("Lift", "liftSpeedController", std::static_pointer_cast<frc::PWMTalonSRX>(liftliftSpeedController));
    
    lifttopLS.reset(new frc::DigitalInput(4));
    lw->AddSensor("Lift", "topLS", lifttopLS);
    
    liftbottomLS.reset(new frc::DigitalInput(5));
    lw->AddSensor("Lift", "bottomLS", liftbottomLS);
    
    liftStringPot.reset(new frc::AnalogPotentiometer(0, 1.0, 0.0));
    lw->AddSensor("Lift", "String Pot", liftStringPot);
    
    armsX_AXIS_LEFT_SOLENOID.reset(new frc::Solenoid(0, 0));
    lw->AddActuator("Arms", "X_AXIS_LEFT_SOLENOID", armsX_AXIS_LEFT_SOLENOID);
    
    armsX_AXIS_RIGHT_SOLENOID.reset(new frc::Solenoid(0, 2));
    lw->AddActuator("Arms", "X_AXIS_RIGHT_SOLENOID", armsX_AXIS_RIGHT_SOLENOID);
    
    armsY_AXIS_LEFT_SOLENOID.reset(new frc::Solenoid(0, 1));
    lw->AddActuator("Arms", "Y_AXIS_LEFT_SOLENOID", armsY_AXIS_LEFT_SOLENOID);
    
    armsY_AXIS_RIGHT_SOLENOID.reset(new frc::Solenoid(0, 3));
    lw->AddActuator("Arms", "Y_AXIS_RIGHT_SOLENOID", armsY_AXIS_RIGHT_SOLENOID);
    
    rungBACK_BAR_SOLENOID.reset(new frc::Solenoid(0, 4));
    lw->AddActuator("Rung", "BACK_BAR_SOLENOID", rungBACK_BAR_SOLENOID);
    
    climberMOTOR_CLIMBER.reset(new WPI_VictorSPX(4));
    
    
    climberclimberTopLS.reset(new frc::DigitalInput(6));
    lw->AddSensor("Climber", "climberTopLS", climberclimberTopLS);
    
    climberclimberBottomLS.reset(new frc::DigitalInput(11));
    lw->AddSensor("Climber", "climberBottomLS", climberclimberBottomLS);
    
    climberclimberSpeedController.reset(new frc::PWMVictorSPX(5));
    lw->AddActuator("Climber", "climberSpeedController", std::static_pointer_cast<frc::PWMVictorSPX>(climberclimberSpeedController));
    
    climberSTRING_POT.reset(new frc::AnalogPotentiometer(1, 1.0, 0.0));
    lw->AddSensor("Climber", "STRING_POT", climberSTRING_POT);
    
    lEDLightsLED.reset(new frc::DigitalOutput(8));
    lw->AddActuator("LEDLights", "LED", lEDLightsLED);
    
    conveyorBeltsMOTOR_LEFT_CON_BELT.reset(new WPI_VictorSPX(5));
    
    
    conveyorBeltsMOTOR_RIGHT_CON_BELT.reset(new WPI_VictorSPX(8));
    
    
    conveyorBeltsDifferentialDrive2.reset(new frc::DifferentialDrive(*conveyorBeltsMOTOR_LEFT_CON_BELT, *conveyorBeltsMOTOR_RIGHT_CON_BELT));
    lw->AddActuator("ConveyorBelts", "Differential Drive 2", conveyorBeltsDifferentialDrive2);
    conveyorBeltsDifferentialDrive2->SetSafetyEnabled(true);
        conveyorBeltsDifferentialDrive2->SetExpiration(0.1);
        conveyorBeltsDifferentialDrive2->SetMaxOutput(1.0);

    conveyorBeltsleftConBeltLS.reset(new frc::DigitalInput(7));
    lw->AddSensor("ConveyorBelts", "leftConBeltLS", conveyorBeltsleftConBeltLS);
    
    conveyorBeltsrightConBeltLS.reset(new frc::DigitalInput(12));
    lw->AddSensor("ConveyorBelts", "rightConBeltLS", conveyorBeltsrightConBeltLS);
    
    conveyorBeltsleftConBeltSpeedController.reset(new frc::PWMVictorSPX(0));
    lw->AddActuator("ConveyorBelts", "leftConBeltSpeedController", std::static_pointer_cast<frc::PWMVictorSPX>(conveyorBeltsleftConBeltSpeedController));
    
    conveyorBeltsrightConBeltSpeedController.reset(new frc::PWMVictorSPX(4));
    lw->AddActuator("ConveyorBelts", "rightConBeltSpeedController", std::static_pointer_cast<frc::PWMVictorSPX>(conveyorBeltsrightConBeltSpeedController));
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
